##################################################
# 字符串
##################################################

生字符串 | 含双引号 | 含井号  | 含连续井号
   r""   |  r#""#   | r##""## | r###""###, ...

字节字符串 | 生串
   b""     | br""

{(字节码 ->) 字符 -> UTF-8}


##################################################
# 可推导特征
##################################################

- cmp: Eq, PartialEq, Ord, PartialOrd.
- Clone: 通过复制从 &T 创建 T .
- Copy: 把类型的"移动语义"替换成"复制语义".
- Hash: 从 &T 计算哈希值.
- Default: 创建具有空值意义的默认值实例.
- Debug: 用格式化器 {:?} 格式化其值.


##################################################
# 宏
##################################################

## 指示器
- block
- expr: 表达式.
- ident: 变量名/函数名.
- item
- literal: 字面值常量.
- pat (pattern)
- path
- stmt (statement)
- tt (token tree)
- ty (type)
- vis (visibility qualifier)

## 参数通配
- `$(parameter), +`: 匹配次数 >= 1.
- `$(parameter), *`: 匹配次数 >= 0.


##################################################
# 哈希计算
##################################################

可作为哈希表之键的类型 <T: Eq + Hash>
- bool.
- int, uint, 及其所有变体.
- String 和 &str (你可以用 String 作为键, 调用`.get()`获取 &str).
- 内部所有类型均实现`Eq + Hash`的复合类型.


##################################################
# unsafe 场景
##################################################

- 解引用原始指针.
- 调用 unsafe 函数或方法(包括FFI函数).
- 访问或修改静态可修改变量.
- 实现 unsafe 特征.


##################################################
# 对象安全
##################################################

对象安全对于**trait对象**是必须的，
因为一旦有了**trait对象**，
就不再知晓实现该trait的具体类型是什么了。

如果**trait方法**返回具体的Self类型，
但是**trait对象**忘记了其真正的类型，
那么方法不可能使用已经忘却的原始具体类型。

同理对于泛型类型参数来说，
当使用 trait 时其会放入具体的类型参数：
此具体类型变成了实现该 trait 的类型的一部分。
当使用 trait 对象时其具体类型被抹去了，
故无从得知放入泛型参数类型的类型是什么。


##################################################
# 工具链
##################################################

## 模块
- `pub mod foo`：foo在某个模块内，用pub修饰令其可从模块之外访问.

## 组织
- 按文件系统的方式来组织，控制点是`模块名.rs`(单文件)或`模块名/mod.rs`(多文件).
- 路径
  - self == ./
  - super == ../
  - crate == /
- 命名绑定 use == ln -s
- 重导出 pub use foo == 将foo归于当前命名空间

## 可见性
- 项 [函数, 方法, 结构体(字段默认私有), 枚举, 模块, 常量] 默认私有
- 同一模块内的项彼此透明.
- 子模块封装并隐藏了内部项的实现，但它能看见内部项定义的上下文，因此子模块的项可以使用父模块的项，反之则不然.
- **pub**: 创建公共项，使子模块部分暴露.
  - `pub` 外部可见
  - `pub(self)` 仅当前模块可见
  - `pub(super)` 仅父模块可见
  - `pub(crate)` 仅当前 crate 可见
  - `pub(in crate::a_mod)` 此绝对路径可见


##################################################
# 数组初始化
##################################################

```
# 数组字面值
let arr: [u8; 3] = [1, 2, 3];

# T: Copy 时 [T; N]
let arr: [Option<u8>; 3] = [None; 3];

# T: Default 且 N <= 32 时 [T; N]
let arr: [Option<String>; 3] = Default::default();
```

> [Methods for Array Initialization in Rust - 2018.12.22](https://www.joshmcguigan.com/blog/array-initialization-rust/)


##################################################
# 泛型
##################################################

## 集合
- T 是 &T 和 &mut T 的超集.
- &T 与 &mut T 互斥.

## T: 'a
定义: T 在 'a 生存期的界限(外延)内.
集合: 是 &'a T 和 &'a mut T 的超集; 包含限定的持有类型.
如果 a = static , 则 T 应在 static 的外延内;
T: 'static 是 &'static T 的超集, 包含 全部持有类型.


##################################################
# 生存期
##################################################

## 省略
- 各引用类型参数获得互相独立的 lifetime .
- 若仅有一个**输入lifetime参数**, 则其 lifetime 成为 输出lifetime .
- 参数`&self`或`&mut self`的 lifetime 会成为 输出lifetime .

## 静态
- &'static T 是指向T的不可变引用, 与程序生存期一致.
- T 不可变, 且引用创建后不可移动.
- T 既可以在编译时创建, 又可以在运行时创建.
  主动使用`Box::leak`泄漏 T 所在内存(堆), 可获得 &'static T .

## 长生
- 生存期形式参数可接收长生于它的生存期.
- 'static 最为长寿. 根据集合论, 其内涵最细致, 外延最小.

## 特质对象
- 普通
  - Box<dyn Trait> => Box<dyn Trait + 'static>
  - dyn Trait => dyn Trait + 'static
  - &'a dyn Trait => &'a (dyn Trait + 'a)
  - Ref<'a, dyn Trait> => Ref<'a, dyn Trait + 'a>
- 生存期形参
  - Box<dyn GenericTrait<'a>> => Box<dyn GenericTrait<'a> + 'a>

## 闭包
因设计问题, 闭包没有生存期省略法则.
若要利用生命期法则, 可以:
- 创建 dyn Fn/FnMut/FnOnce 的静态引用;
- 闭包工厂生产闭包.


##################################################
# 异步
##################################################

## 期值 (future)
期值好比可暂停的闭包。轮询期值，它将会运行某些代码，然后暂停去等待某事发生。当那件事发生后，期值再次被轮询并运行代码...

## 任务 (task)
任务是线程的异步等价概念。它们是被传给执行器控制的期值。执行器调度和执行任务，就像操作系统调度和执行线程一样。


##################################################
# Cargo
##################################################

如果你要靠`build.rs`生成什么东西，一定要追踪最新的生成产物，再发行。
因为在发行的编译期内不允许除`OUT_DIR`目录以外的任何内容。
